install.packages("swirl")
swirl
swirl()
library("swirl")
swirl()
swirl
library("swirl")
swirl()
1:20
pi:10
15:1
?":"
seq(1,2)
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >=6
c("My","name","is")
my_char <-c("My","name","is")
my_char
paste(my_char,)
paste(my_char,collapse=" ")
c(my_char,"Alan")
my_name<-c(my_char,"Alan")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"))
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data <-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x0 & x>0)]
x[!is.na(x) & x>0)]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <= c(11,2,NA)
vect2 <- c(11,2,NA)
play()
vect2
nxt()
names(vect2)<- c("foo","bar","narf")
names(vect2)<- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<=1:20
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
?colnames
colnames(my_data)<-cnames
my_data
TRUE == TRUE
(FALSE==TRUE)==FALSE
explore()
play()
true == true
T == T
nxt()
6==7
6<7
10<=10
5!=7
!5==7
play()
!5
nxt()
F&F
FALSE&FALSE
TURE & c(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE &% c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 < 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints>5
which(ints)
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
submit()
?mean
sd(c(1,2))
?sd
evaluat(sd,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(funcion(x){x+1},6)
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun")
paste("Programming","is","fun!")
submit()
telegram("wh","at")
submtit()
submit()
mad_libs(place="home",adjective="wet",noun="banana")
submit()
"I" %p% "love" %p% "R!"
swirl()
?IInstallCourses
?InstallCourses
swirl()
InstallCourses
?InstallCourses
install_from_swirl(Data_Analysis)
install_from_swirl("Data_Analysis")
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
install_from_swirl("Getting_and_Cleaning_Data")
install_from_swirl("Regression_Models")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
?lapply
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
?str
?summary
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
play()
head(flags)
nxt()
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
play()
flags$landmass
tapply(flags$animate, c(flags$landmass, flags$red), mean)
tapply(flags$animate, flags$landmass, flags$red, mean)
tapply(flags$animate, as.list(flags$landmass, flags$red) mean)
as.list(flags$landmass, flags$red)
tapply(flags$animate, as.list(flags$landmass, flags$red), mean)
length(as.list(flags$landmass, flags$red))
length(flags$animate)
tapply(flags$animate, as.list(flags$landmass, flags$red), mean)
x <- as.list(flags$landmass, flags$red)
length(x)
tapply(flags$animate,x,mean)
nxt()
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
explore()
play()
sample(1:16)
nxt()
sample(0:1,100,replace = TRUE,prob = c(0.3,0.7))
flipts<-sample(0:1,100,replace = TRUE,prob = c(0.3,0.7))
flips<-sample(0:1,100,replace = TRUE,prob = c(0.3,0.7))
flips<-sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(1,size=1,n=100,prob=0.7)
flips2<-rbinom(1,size=1,prob=0.7,n=100)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(n = 10,mean = 100,sd = 25)
?rpois
rpois(n = 5,lambda = 10)
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
ti<-Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17,
| 1986 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed,y=cars$dist)
plot(cars)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
?plot
plot(cars,main="My Plot")
?cars
?plot
plot(cars,sub="My Plot Subtitle")
?par
plot(cars,col=2)
?par
plot(cars,xlim=c(10,15))
plot(cars,pch=2
)
load(mtcars)
data(mtcars)
play()
head(mtcars)
?mtcars
nxt()
?boxplot
boxplot(data=mtcars,formula = mpg~cyl)
boxplot(mtcars,formula = mpg~cyl)
boxplot(formula = mpg~cyl,data=mtcars)
hist(mtcars$mpg)
mtcars
allMPG <- mtcars$mpg
allMPG
mean(allMPG)
sampMeanMPG <- mean(allMPG)
sampVarMGP <- var(allMPG)
n <- length(allMPG)
tStat <- (sampMeanMPG - 12.0) /
| sqrt(sampVarMPG/n)
tStat <- (sampMeanMPG - 12.0) / sqrt(sampVarMPG/n)
myDF <- n-1
tStat
myDF
0
quit
help
play()
nxt()
pVal <- pVal1 *2
pVal
t.test(allMPG,mu=12.0,alternative = two.sided)
t.test(allMPG,mu=12.0,alternative = "two.sided)
t.test(allMPG,mu=12.0,alternative = "two.sided")
t.test(allMPG,mu=12.0,alternative = "two.sided")
swirl()
install.packages("ggplot2")
library("ggplot2")
data("diamonds")
view(diamonds)
View(diamonds)
?View
?diamonds
ggplot(diamonds,aes(x=carat,y=price)) + geom_point()
ggplot(diamonds,aes(x=carat,y=price))
ggplot(diamonds,aes(x=carat,y=price)) + geom_point()
ggplot(diamonds,aes(x=carat,y=price,color=clarity)) + geom_point()
ggplot(diamonds,aes(x=carat,y=price,color=color)) + geom_point()
ggplot(diamonds,aes(x=carat,y=price,color=cut)) + geom_point()
ggplot(diamonds,aes(x=carat,y=price,color=clarity,size=cut())) + geom_point()
ggplot(diamonds,aes(x=carat,y=price,color=clarity,size=cut) + geom_point()
ggplot(diamonds,aes(x=carat,y=price,color=clarity,size=cut)) + geom_point()
ggplot(diamonds,aes(x=carat,y=price,color=clarity,shape=cut)) + geom_point()
ggplot(diamonds,aes(x=carat,y=price)) + geom_smooth()
ggplot(diamonds,aes(x=carat,y=price)) + geom_point() geom_smooth()
ggplot(diamonds,aes(x=carat,y=price)) + geom_point()+ geom_smooth()
ggplot(diamonds,aes(x=carat,y=price)) + geom_point()+ geom_smooth(se=F)
ggplot(diamonds,aes(x=carat,y=price)) + geom_point()+ geom_smooth(se=F, method="lm")
ggplot(diamonds,aes(x=carat,y=price,color=clarity)) + geom_point()+ geom_smooth(se=F, method="lm")
ggplot(diamonds,aes(x=carat,y=price,color=clarity)) + geom_smooth(se=F)
ggplot(diamonds,aes(x=carat,y=price,color=clarity)) + geom_smooth(se=F) + facet_wrap(~clarity)
ggplot(diamonds,aes(x=carat,y=price,color=cut)) + geom_point() + facet_wrap(~clarity)
ggplot(diamonds,aes(x=carat,y=price,color=cut)) + geom_point() + facet_grid(color~clarity)
ggplot(diamonds,aes(x=price)) + geom_histogram()
?ggsave
swirl()
install_from_swirl("Exploratory_Data_Analysis")
c1 <- c(1.5 2.5 3.5 2.5 1.5 3.5 2.5 3.5 1.5 3.5 ...
0.5 -0.5 0.5 1.5 0.5 3.5 2.5 1.5 3.5 3.5)
c1 <- c(1.5, 2.5, 3.5, 2.5, 1.5, 3.5, 2.5, 3.5, 1.5, 3.5, ...
0.5, -0.5, 0.5, 1.5, 0.5, 3.5 ,2.5, 1.5, 3.5, 3.5)
c1 <- c(1.5, 2.5, 3.5, 2.5, 1.5, 3.5, 2.5, 3.5, 1.5, 3.5, 0.5, -0.5, 0.5, 1.5, 0.5, 3.5 ,2.5, 1.5, 3.5, 3.5)
summary(c1)
hist(c1)
qqnorm(c1)
shapiro.test(c1)
wilcox.test(c1,alternative='greater')
t.test(c1,alternative='greater')
?log
log(c1)
c1
log(-0.5)
cd
?ls
?cd
?dir
cd()
getwd()
setwd('/Users/ajern/Dropbox/Research/Papers/Preference learning/Code+Data+Materials/Experiment 2/')
dir
ls
ls()
getwd()
setwd('./Data/')
list.files
list.files9)
list.files()
load('expt2data.csv')
t.test(c1,alternative = "greater")
c2 = c(-3.5, -0.5, 3.5, -0.5, -1.5, 2.5, 0.5, -0.5, 3.5, 1.5,1.5, -0.5, 2.5, -0.5, 2.5, 2.5, 0.,5 0.5, 2.5, 0.5)
c2 = c(-3.5, -0.5, 3.5, -0.5, -1.5, 2.5, 0.5, -0.5, 3.5, 1.5,1.5, -0.5, 2.5, -0.5, 2.5, 2.5, 0.5, 0.5, 2.5, 0.5)
t.test(c2,alternative = "greater")
qqplot(c2)
qqnorm(c2)
shapiro.test(c2)
